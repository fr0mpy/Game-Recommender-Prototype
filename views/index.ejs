<%- include('partials/header', { title: 'Slot Forge - Home' }) %>

<div class="max-w-6xl mx-auto">
  <!-- Player Context Confidence Panel -->
  <% if (playerContext && playerContext.confidence) { %>
  <div
    class="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mb-6"
  >
    <div class="flex items-center justify-between">
      <div>
        <h3 class="text-sm font-semibold text-blue-800 mb-1">
          🎯 Player Context Analysis
        </h3>
        <p class="text-xs text-blue-700">
          <span class="font-medium"
            >Confidence: <%= playerContext.confidence.score ?
            Math.round(playerContext.confidence.score * 100) : 0 %>%</span
          >
          <span class="mx-2">•</span>
          <span class="capitalize"><%= playerContext.confidence.level %></span>
          data quality
        </p>
      </div>
      <div class="text-right">
        <div
          class="w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-sm <%= playerContext.confidence.level === 'high' ? 'bg-green-500' : playerContext.confidence.level === 'medium' ? 'bg-yellow-500' : 'bg-gray-500' %>"
        >
          <%= Math.round(playerContext.confidence.score * 100) %>%
        </div>
      </div>
    </div>

    <!-- Context Information Row -->
    <div class="mt-3 grid grid-cols-1 md:grid-cols-3 gap-4 text-xs">
      <!-- Device & System Info -->
      <div class="bg-white rounded-lg p-3 border border-blue-100">
        <h4 class="font-medium text-blue-800 mb-2">📱 Device & System</h4>
        <div class="space-y-1">
          <div class="flex justify-between">
            <span class="text-casino-dark text-opacity-70">Device:</span>
            <span class="font-medium capitalize"
              ><%= playerContext.deviceType || 'Unknown' %></span
            >
          </div>
          <div class="flex justify-between">
            <span class="text-casino-dark text-opacity-70">System Theme:</span>
            <span
              class="font-medium capitalize <%= playerContext.systemTheme === 'dark' ? 'text-casino-dark' : playerContext.systemTheme === 'light' ? 'text-yellow-600' : 'text-gray-500' %>"
            >
              <%= playerContext.systemTheme === 'dark' ? '🌙 Dark Mode' : playerContext.systemTheme === 'light' ? '☀️ Light Mode' : '❓ Unknown' %>
            </span>
          </div>
        </div>
      </div>

      <!-- Referrer & Source -->
      <div class="bg-white rounded-lg p-3 border border-blue-100">
        <h4 class="font-medium text-blue-800 mb-2">🔗 Traffic Source</h4>
        <div class="space-y-1">
          <% if (playerContext.referrer &&
          playerContext.referrer.includes('ballysports')) { %>
          <div
            class="bg-green-50 border border-green-200 rounded px-2 py-1 mb-1"
          >
            <span class="text-green-700 font-medium"
              >🏈 Bally Sports Referrer</span
            >
          </div>
          <% } else if (playerContext.referrer &&
          (playerContext.referrer.includes('google') ||
          playerContext.referrer.includes('search'))) { %>
          <div class="bg-blue-50 border border-blue-200 rounded px-2 py-1 mb-1">
            <span class="text-blue-700 font-medium">🔍 Search Engine</span>
          </div>
          <% } else if (playerContext.referrer) { %>
          <div class="bg-gray-50 border border-gray-200 rounded px-2 py-1 mb-1">
            <span class="text-casino-dark text-opacity-80 font-medium">🌐 External Site</span>
            <span class="text-xs text-gray-500 ml-1">(no x-sell opportunity)</span>
          </div>
          <% } else { %>
          <div
            class="bg-purple-50 border border-purple-200 rounded px-2 py-1 mb-1"
          >
            <span class="text-purple-700 font-medium">📱 Direct Visit</span>
          </div>
          <% } %>
        </div>
      </div>

      <!-- Time & Location -->
      <div class="bg-white rounded-lg p-3 border border-blue-100">
        <h4 class="font-medium text-blue-800 mb-2">🌍 Time & Location</h4>
        <div class="space-y-1">
          <% if (playerContext.temporal && playerContext.temporal.currentTime &&
          playerContext.temporal.currentTime.localeInfo) { %>
          <div class="flex justify-between">
            <span class="text-casino-dark text-opacity-70">Local Time:</span>
            <span class="font-medium"
              ><%= playerContext.temporal.currentTime.localeInfo.timeString
              %></span
            >
          </div>
          <div class="flex justify-between">
            <span class="text-casino-dark text-opacity-70">Day:</span>
            <span class="font-medium"
              ><%= playerContext.temporal.currentTime.localeInfo.dayName
              %></span
            >
          </div>
          <% } %>
          <div class="flex justify-between">
            <span class="text-casino-dark text-opacity-70">Timezone:</span>
            <span class="font-medium"
              ><%= playerContext.timezone || 'Unknown' %></span
            >
          </div>
        </div>
      </div>
    </div>

    <% if (playerContext.confidence.factors &&
    playerContext.confidence.factors.length > 0) { %>
    <div class="mt-3 flex flex-wrap gap-2">
      <% playerContext.confidence.factors.forEach(factor => { %>
      <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs"
        >✓ <%= factor %></span
      >
      <% }) %>
    </div>
    <% } %> <% if (playerContext.temporal &&
    playerContext.temporal.activeHolidays &&
    playerContext.temporal.activeHolidays.length > 0) { %>
    <div class="mt-3 border-t border-blue-200 pt-3">
      <p class="text-xs text-blue-700 font-medium mb-2">🎉 Active Events:</p>
      <div class="flex flex-wrap gap-2">
        <% playerContext.temporal.activeHolidays.forEach(holiday => { %>
        <span class="bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs">
          🎊 <%= holiday.name.replace('-', ' ') %>
        </span>
        <% }) %>
      </div>
    </div>
    <% } %>

    <!-- LLM Context Summary -->
    <% if (playerContext.contextSummary) { %>
    <div class="mt-3 border-t border-blue-200 pt-3">
      <p class="text-xs text-blue-700 font-medium mb-2">
        🤖 AI Context Analysis:
      </p>
      <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
        <p class="text-xs text-blue-800 leading-relaxed italic">
          "<%= playerContext.contextSummary %>"
        </p>
      </div>
    </div>
    <% } %> <% if (crossSell && crossSell.eligible) { %>
    <div class="mt-3 border-t border-blue-200 pt-3">
      <p class="text-xs text-green-700 font-medium mb-2">
        🏈 Sports Cross-sell Opportunity:
      </p>
      <div class="flex flex-wrap gap-2">
        <% crossSell.factors.forEach(factor => { %>
        <span class="bg-green-100 text-green-800 px-2 py-1 rounded text-xs"
          >⚡ <%= factor %></span
        >
        <% }) %>
      </div>
    </div>
    <% } %>
  </div>
  <% } %>
  <!-- Success/Error Messages -->
  <% if (message) { %>
  <div
    class="mb-6 p-4 rounded-lg <%= message.type === 'success' ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700' %> border"
  >
    <%= message.text %>
  </div>
  <% } %>

  <% if (games.length > 0) { %>
  <!-- Game Selection & Recommendation Section -->
  <div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-semibold text-casino-dark">
        🎯 Get Game Recommendations
      </h2>
      <% if (customGamesExist) { %>
      <button 
        type="button"
        onclick="resetToDefaults()"
        class="text-gray-500 hover:text-gray-700 text-xs underline"
        title="Clear custom games and reset to defaults"
      >
        Reset to Defaults
      </button>
      <% } %>
    </div>
    <form method="POST" action="/recommend" class="space-y-6" onsubmit="return handleRecommendSubmit(event)">
      <!-- Game Selection -->
      <div>
        <label
          for="gameId"
          class="block text-sm font-medium text-casino-dark text-opacity-80 mb-2"
        >
          Select a game to find similar games:
        </label>
        <select
          name="gameId"
          id="gameId"
          required
          class="w-full p-3 border border-gray-300 rounded-md focus:ring-casino focus:border-casino"
        >
          <option value="">Choose a game...</option>
          <% games.forEach(game => { %>
          <option value="<%= game.id %>">
            <%- game.title %>
          </option>
          <% }) %>
        </select>
      </div>

      <!-- Weight Configuration -->
      <div>
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-md font-medium text-casino-dark text-opacity-80">
            🎚️ Recommendation Weights
          </h3>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div>
            <label
              for="theme"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              Theme Similarity
            </label>
            <input
              type="range"
              id="theme"
              name="theme"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.theme %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('theme', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="theme-value" class="font-semibold text-casino"
                ><%= Math.round(settings.theme * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>

          <div>
            <label
              for="volatility"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              Volatility Matching
            </label>
            <input
              type="range"
              id="volatility"
              name="volatility"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.volatility %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('volatility', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="volatility-value" class="font-semibold text-casino"
                ><%= Math.round(settings.volatility * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>

          <div>
            <label
              for="studio"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              Studio Preference
            </label>
            <input
              type="range"
              id="studio"
              name="studio"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.studio %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('studio', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="studio-value" class="font-semibold text-casino"
                ><%= Math.round(settings.studio * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>

          <div>
            <label
              for="mechanics"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              Game Mechanics
            </label>
            <input
              type="range"
              id="mechanics"
              name="mechanics"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.mechanics %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('mechanics', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="mechanics-value" class="font-semibold text-casino"
                ><%= Math.round(settings.mechanics * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>

          <div>
            <label
              for="rtp"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              RTP (Return Rate)
            </label>
            <input
              type="range"
              id="rtp"
              name="rtp"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.rtp || 0.04 %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('rtp', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="rtp-value" class="font-semibold text-casino"
                ><%= Math.round((settings.rtp || 0.04) * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>

          <div>
            <label
              for="maxWin"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              Max Win Potential
            </label>
            <input
              type="range"
              id="maxWin"
              name="maxWin"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.maxWin || 0.04 %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('maxWin', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="maxWin-value" class="font-semibold text-casino"
                ><%= Math.round((settings.maxWin || 0.04) * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>

          <div>
            <label
              for="features"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              Feature Types
            </label>
            <input
              type="range"
              id="features"
              name="features"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.features || 0.04 %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('features', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="features-value" class="font-semibold text-casino"
                ><%= Math.round((settings.features || 0.04) * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>

          <div>
            <label
              for="pace"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              Game Pace
            </label>
            <input
              type="range"
              id="pace"
              name="pace"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.pace || 0.03 %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('pace', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="pace-value" class="font-semibold text-casino"
                ><%= Math.round((settings.pace || 0.03) * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>

          <div>
            <label
              for="bonusFrequency"
              class="block text-sm font-medium text-casino-dark text-opacity-70 mb-1"
            >
              Bonus Frequency
            </label>
            <input
              type="range"
              id="bonusFrequency"
              name="bonusFrequency"
              min="0"
              max="1"
              step="0.01"
              value="<%= settings.bonusFrequency || 0.02 %>"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
              oninput="updateSliderValue('bonusFrequency', this.value)"
            />
            <div class="flex justify-between text-xs text-casino-dark text-opacity-60 mt-1">
              <span>0%</span>
              <span id="bonusFrequency-value" class="font-semibold text-casino"
                ><%= Math.round((settings.bonusFrequency || 0.02) * 100) %>%</span
              >
              <span>100%</span>
            </div>
          </div>
        </div>
        

        <!-- Similarity Engine Selection -->
        <div class="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
          <div class="mb-3">
            <span class="text-sm font-medium text-blue-900">Recommendation Engine:</span>
          </div>
          <div class="space-y-2">
            <label class="flex items-center cursor-pointer">
              <input type="radio" name="recommendationEngine" value="algo" checked class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
              <div class="ml-3">
                <div class="text-sm font-medium text-gray-900"><span class="font-mono text-green-600">ALGO</span> - Mathematical analysis (fast)</div>
                <div class="text-xs text-gray-500">Fast algorithmic similarity - user weights apply</div>
              </div>
            </label>
            <label class="flex items-center cursor-pointer">
              <input type="radio" name="recommendationEngine" value="llm" class="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500">
              <div class="ml-3">
                <div class="text-sm font-medium text-gray-900"><span class="font-mono text-purple-600">LLM</span> - AI-powered semantic analysis</div>
                <div class="text-xs text-gray-500">AI-powered semantic analysis with contextual explanations</div>
              </div>
            </label>
          </div>
        </div>
      </div>

      <div class="flex justify-center">
        <button
          type="submit"
          id="find-games-btn"
          class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-lg transition duration-200 text-lg disabled:bg-gray-400 disabled:cursor-not-allowed"
        >
          <span id="btn-text">🔍 Find Similar Games</span>
          <span id="btn-spinner" class="hidden">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Analyzing Games...
          </span>
        </button>
      </div>
    </form>
  </div>

  <!-- Generate Games Section -->
  <div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <h2 class="text-xl font-semibold text-casino-dark mb-4">
      📊 Custom Game Dataset Generation
    </h2>

    <form method="POST" action="/generate" class="space-y-4" id="generateForm">
      <div class="flex items-start justify-between gap-6">
        <div class="flex-1">
          <p class="text-casino-dark text-opacity-70 mb-2">
            Current custom dataset:
            <span class="font-bold text-casino"><%= games.length %></span> games
            <span class="text-xs text-green-600">(Stored in Redis)</span>
          </p>

          <label
            for="customPrompt"
            class="block text-sm font-medium text-casino-dark text-opacity-80 mb-2"
          >
            Custom Generation Prompt:
          </label>
          <textarea
            id="customPrompt"
            name="customPrompt"
            rows="3"
            class="w-full p-3 border border-gray-300 rounded-md focus:ring-casino focus:border-casino"
            placeholder="Enter your custom prompt for generating slot games..."
          ><%= customPrompt || 'Generate 100 slot games' %></textarea>
          <p class="text-xs text-casino-dark text-opacity-60 mt-1">
            Customize how the AI generates your games.
          </p>
          
          <!-- Generation Mode Selection -->
          <div class="mt-3 p-3 bg-gray-50 rounded-lg border">
            <h4 class="text-sm font-medium text-gray-700 mb-3">Generation Engine</h4>
            
            <!-- Fast Mode (Hybrid) - Default -->
            <div class="flex items-start space-x-3 mb-3">
              <input 
                type="radio" 
                id="generationHybrid" 
                name="generationMode" 
                value="hybrid"
                checked
                class="mt-1 rounded-full border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
              >
              <div class="flex-1">
                <label for="generationHybrid" class="text-sm font-medium text-gray-700 flex items-center">
                  🚀 Fast Mode <span class="ml-2 px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded-full font-medium">RECOMMENDED</span>
                </label>
                <p class="text-xs text-gray-500 mt-0.5">
                  Claude 3 Haiku with parallel batching • <strong>8-12 seconds</strong> • Great quality
                </p>
              </div>
            </div>
            
            <!-- Premium Mode (Traditional) -->
            <div class="flex items-start space-x-3 mb-3">
              <input 
                type="radio" 
                id="generationTraditional" 
                name="generationMode" 
                value="traditional"
                class="mt-1 rounded-full border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
              >
              <div class="flex-1">
                <label for="generationTraditional" class="text-sm font-medium text-gray-700">
                  🎯 Premium Mode
                </label>
                <p class="text-xs text-gray-500 mt-0.5">
                  Claude 4 Sonnet single call • <strong>60-90 seconds</strong> • Maximum quality
                </p>
              </div>
            </div>
            
            <!-- Development Mode (Mock) -->
            <div class="flex items-start space-x-3">
              <input 
                type="radio" 
                id="generationMock" 
                name="generationMode" 
                value="mock"
                class="mt-1 rounded-full border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
              >
              <div class="flex-1">
                <label for="generationMock" class="text-sm font-medium text-gray-700 flex items-center">
                  ⚡ Dev Mode <span class="ml-2 px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded-full">NO API</span>
                </label>
                <p class="text-xs text-gray-500 mt-0.5">
                  Mock data generation • <strong>Instant</strong> • Testing only
                </p>
              </div>
            </div>
          </div>
        </div>

        <div class="flex flex-col gap-3">
          <button
            type="button"
            id="generateButton"
            class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200 whitespace-nowrap disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span id="generateButtonText">🤖 Generate Games</span>
            <span id="generateButtonSpinner" class="hidden">
              <svg
                class="animate-spin -ml-1 mr-3 h-4 w-4 text-white inline"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"
                ></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Generating...
            </span>
          </button>
        </div>
      </div>
    </form>

    <!-- Generation Progress Area (hidden by default) -->
    <div
      id="generationProgress"
      class="hidden mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg"
    >
      <div class="flex items-center mb-2">
        <svg
          class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"
          ></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
        <h3 class="text-lg font-semibold text-blue-800">Generating Games</h3>
      </div>
      <div class="text-sm text-blue-700 mb-3">
        <p id="progressMessage">Preparing AI generation...</p>
        <p id="progressSubtext" class="text-xs mt-1">
          Getting ready to generate your games...
        </p>
      </div>
      <div class="w-full bg-blue-200 rounded-full h-2">
        <div
          id="progressBar"
          class="bg-blue-600 h-2 rounded-full transition-all duration-500"
          style="width: 0%"
        ></div>
      </div>
    </div>
  </div>

  <!-- Export Section -->
  <div class="bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-semibold text-casino-dark mb-4">
      📁 Export Game Data
    </h2>
    <div class="flex items-center justify-between">
      <p class="text-casino-dark text-opacity-70">
        Download the current dataset for analysis or external use
      </p>
      <div class="flex gap-3">
        <a
          href="/export/json"
          class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200"
        >
          📄 Download JSON
        </a>
        <a
          href="/export/csv"
          class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-200"
        >
          📊 Download CSV
        </a>
      </div>
    </div>
  </div>
  <% } else { %>
  <!-- Empty State -->
  <div class="bg-white rounded-lg shadow-md p-12 text-center">
    <div class="text-6xl mb-4">🎰</div>
    <h2 class="text-2xl font-semibold text-casino-dark mb-2">No Games Yet</h2>
    <p class="text-casino-dark text-opacity-70 mb-6">
      Generate your first dataset of 100 fictional slot games to get started
      with recommendations.
    </p>
  </div>
  <% } %>
</div>

<script>
  // Session and context tracking
  const sessionId = "<%= sessionId %>";
  
  // Custom games storage in localStorage
  function saveCustomGames(games) {
    localStorage.setItem('slotForge_customGames', JSON.stringify(games));
    localStorage.setItem('slotForge_hasCustomGames', 'true');
    
    // Note: Redis storage handles persistence automatically
  }
  
  function loadCustomGames() {
    const hasCustom = localStorage.getItem('slotForge_hasCustomGames');
    if (hasCustom === 'true') {
      const customGames = localStorage.getItem('slotForge_customGames');
      return customGames ? JSON.parse(customGames) : null;
    }
    return null;
  }
  
  function clearCustomGames() {
    localStorage.removeItem('slotForge_customGames');
    localStorage.removeItem('slotForge_hasCustomGames');
  }
  
  // Note: Redis handles storage directly, no client sync needed
  async function syncCustomGamesToServer(games = null) {
    // No-op: Games are stored in Redis globally, no sync required
    console.log('Sync bypassed - using Redis global storage');
    return true;
  }

  // Detect and send timezone and system theme
  function detectAndSendClientContext() {
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const systemTheme = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    
    // Send context via fetch to update server-side context
    fetch('/api/update-context', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Session-ID': sessionId,
        'X-Timezone': timezone,
        'X-System-Theme': systemTheme
      },
      body: JSON.stringify({
        timezone: timezone,
        systemTheme: systemTheme,
        userAgent: navigator.userAgent,
        language: navigator.language
      })
    }).catch(error => console.log('Context update failed:', error));
  }

  // Store session ID for future requests
  if (sessionId) {
    localStorage.setItem("slotForge_sessionId", sessionId);

    // Store player preferences for context tracking
    const playerPrefs = {
      visitCount:
        (parseInt(localStorage.getItem("slotForge_visitCount")) || 0) + 1,
      lastVisit: new Date().toISOString(),
      preferredThemes: [], // Could be populated from user selections
      ballysContext: checkBallysSportsContext(),
    };
    localStorage.setItem("slotForge_playerPrefs", JSON.stringify(playerPrefs));
    localStorage.setItem("slotForge_visitCount", playerPrefs.visitCount);
  }

  function checkBallysSportsContext() {
    // Check for Bally's Sports indicators
    const referrer = document.referrer;
    const hasBallysCookies =
      document.cookie.includes("ballysports") ||
      document.cookie.includes("bally");

    return {
      referredFromBallys:
        referrer.includes("ballysports") || referrer.includes("bally"),
      hasBallyCookies: hasBallysCookies,
      detectedAt: new Date().toISOString(),
    };
  }

  function updateSliderValue(sliderId, newValue, skipRebalance = false) {
    const newValueFloat = parseFloat(newValue);
    
    if (!skipRebalance) {
      // Rebalance other sliders to maintain 100% total
      rebalanceSliders(sliderId, newValueFloat);
    } else {
      // Update display with smart rounding to ensure 100% total
      updateAllSliderDisplays();
      saveAllWeights();
    }
  }
  
  function rebalanceSliders(changedSliderId, newValue) {
    const sliderIds = ['theme', 'volatility', 'studio', 'mechanics', 'rtp', 'maxWin', 'features', 'pace', 'bonusFrequency'];
    const otherSliders = sliderIds.filter(id => id !== changedSliderId);
    
    // Calculate remaining weight to distribute
    const remainingWeight = 1.0 - newValue;
    
    // Get current values of other sliders
    const currentValues = {};
    let currentTotal = 0;
    
    otherSliders.forEach(id => {
      const slider = document.getElementById(id);
      if (slider) {
        currentValues[id] = parseFloat(slider.value) || 0;
        currentTotal += currentValues[id];
      }
    });
    
    // Calculate new values for other sliders
    const newValues = {};
    otherSliders.forEach(id => {
      if (currentTotal > 0) {
        // Proportional adjustment
        newValues[id] = (currentValues[id] / currentTotal) * remainingWeight;
      } else {
        // Equal distribution if all others were zero
        newValues[id] = remainingWeight / otherSliders.length;
      }
    });
    
    // Normalize to ensure exact 100% total (fix rounding errors)
    const calculatedTotal = newValue + Object.values(newValues).reduce((sum, val) => sum + val, 0);
    const normalizationFactor = 1.0 / calculatedTotal;
    
    // Apply normalization to the changed slider too
    const normalizedNewValue = newValue * normalizationFactor;
    document.getElementById(changedSliderId).value = normalizedNewValue;
    
    // Apply normalized values to other sliders
    otherSliders.forEach(id => {
      const slider = document.getElementById(id);
      if (slider) {
        const normalizedValue = newValues[id] * normalizationFactor;
        // Clamp to valid range
        const clampedValue = Math.max(0, Math.min(1, normalizedValue));
        
        // Update slider and display
        slider.value = clampedValue;
        updateSliderValue(id, clampedValue, true); // Skip rebalance to avoid recursion
      }
    });
    
    // Update the changed slider's display too (since we normalized it)
    updateSliderValue(changedSliderId, normalizedNewValue, true);
    
    // Update all displays with smart rounding to ensure 100% total
    updateAllSliderDisplays();
    saveAllWeights();
  }
  
  // Smart rounding function that ensures individual percentages add to exactly 100%
  function updateAllSliderDisplays() {
    const sliderIds = ['theme', 'volatility', 'studio', 'mechanics', 'rtp', 'maxWin', 'features', 'pace', 'bonusFrequency'];
    
    // Get actual float values
    const values = sliderIds.map(id => {
      const slider = document.getElementById(id);
      return slider ? parseFloat(slider.value) : 0;
    });
    
    // Convert to percentages and round
    const rawPercentages = values.map(v => v * 100);
    const roundedPercentages = rawPercentages.map(p => Math.round(p));
    
    // Calculate rounding discrepancy
    const targetTotal = 100;
    const currentTotal = roundedPercentages.reduce((sum, p) => sum + p, 0);
    const discrepancy = targetTotal - currentTotal;
    
    // Adjust the largest value to ensure perfect 100% total
    if (discrepancy !== 0) {
      // Find the index of the largest value
      let maxIndex = 0;
      for (let i = 1; i < roundedPercentages.length; i++) {
        if (roundedPercentages[i] > roundedPercentages[maxIndex]) {
          maxIndex = i;
        }
      }
      // Adjust the largest value by the discrepancy
      roundedPercentages[maxIndex] += discrepancy;
    }
    
    // Update displays
    sliderIds.forEach((id, index) => {
      const displayElement = document.getElementById(id + "-value");
      if (displayElement) {
        displayElement.textContent = roundedPercentages[index] + "%";
      }
    });
    
    // Weights automatically balance to 100%
  }
  
  function updateTotalDisplay() {
    // Total weight displays removed - weights automatically balance to 100%
    console.log(`⚖️ Slider total: 100%`);
  }
  
  function saveAllWeights() {
    const sliderIds = ['theme', 'volatility', 'studio', 'mechanics', 'rtp', 'maxWin', 'features', 'pace', 'bonusFrequency'];
    const weights = {};
    
    sliderIds.forEach(id => {
      const slider = document.getElementById(id);
      if (slider) {
        weights[id] = parseFloat(slider.value);
      }
    });
    
    localStorage.setItem("slotForge_weightPrefs", JSON.stringify(weights));
    console.log('💾 Saved weights:', weights);
  }

  // Similarity engine selection is now handled by radio buttons
  // No additional JavaScript needed as radio buttons work natively with forms

  function validateGameCount(prompt) {
    if (!prompt) return { valid: true, count: 100 }; // Default to 100
    
    // Extract number from prompt
    const numbers = prompt.match(/\b(\d+)\b/g);
    if (!numbers) return { valid: true, count: 100 }; // Default if no number found
    
    // Get the largest number (assuming it's the game count)
    const gameCount = Math.max(...numbers.map(n => parseInt(n)));
    
    if (gameCount < 1) {
      return { valid: false, error: 'Must generate at least 1 game', count: gameCount };
    }
    
    if (gameCount > 100) {
      return { valid: false, error: 'Cannot generate more than 100 games', count: gameCount };
    }
    
    return { valid: true, count: gameCount };
  }
  
  function isGameGenerationPrompt(prompt) {
    if (!prompt) return true; // Empty prompt is fine
    
    const lowercased = prompt.toLowerCase();
    
    // Check for non-game generation patterns
    const nonGamePatterns = [
      /write.*(?:code|function|script|program)/,
      /create.*(?:website|app|application|database)/,
      /build.*(?:system|platform|tool)/,
      /explain.*(?:how to|concept|algorithm)/,
      /help.*(?:with|me)/,
      /what.*(?:is|are|does)/,
      /tell.*(?:me|about)/,
      /calculate|compute|solve/,
      /translate|convert/,
      /summarize|analyze/,
      /research|find.*information/,
      /send.*email|make.*call/,
      /access.*file|read.*document/,
      /install|download|update/
    ];
    
    // Check if request is clearly not about game generation
    const containsNonGameRequest = nonGamePatterns.some(pattern => pattern.test(lowercased));
    const containsGameKeywords = /(?:game|slot|casino|reel|spin|bet|win|bonus|jackpot|theme|volatility)/i.test(prompt);
    
    // Invalid if it contains non-game patterns and no game keywords
    return !(containsNonGameRequest && !containsGameKeywords);
  }

  function showPromptError(message) {
    // Remove existing error if any
    clearPromptError();
    
    // Create error message element
    const errorDiv = document.createElement('div');
    errorDiv.id = 'prompt-error';
    errorDiv.className = 'mt-2 p-3 bg-red-100 border border-red-400 text-red-700 rounded-md text-sm';
    errorDiv.innerHTML = `
      <div class="flex items-start">
        <svg class="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
        </svg>
        <span>${message}</span>
      </div>
    `;
    
    // Insert after the textarea
    const textarea = document.getElementById('customPrompt');
    textarea.parentNode.insertBefore(errorDiv, textarea.nextSibling);
    
    // Add red border to textarea
    textarea.classList.add('border-red-400', 'focus:border-red-500', 'focus:ring-red-500');
    textarea.classList.remove('border-gray-300', 'focus:border-casino', 'focus:ring-casino');
  }

  function clearPromptError() {
    const existingError = document.getElementById('prompt-error');
    if (existingError) {
      existingError.remove();
    }
    
    // Reset textarea styling
    const textarea = document.getElementById('customPrompt');
    textarea.classList.remove('border-red-400', 'focus:border-red-500', 'focus:ring-red-500');
    textarea.classList.add('border-gray-300', 'focus:border-casino', 'focus:ring-casino');
  }

  // Progress source for Server-Sent Events (declared in broader scope)
  let progressSource = null;

  function startProgressSimulation(mode, progressBar, progressMessage, progressSubtext, gameCount) {
    console.log('🎬 Starting progress simulation for mode:', mode);
    
    const progressSteps = {
      hybrid: {
        duration: 10000, // 10 seconds (8-12s range)
        steps: [
          { progress: 15, message: 'Initializing Claude 3 Haiku...', subtext: 'Preparing fast AI generation' },
          { progress: 35, message: 'Creating game concepts...', subtext: 'AI analyzing your requirements' },
          { progress: 60, message: 'Generating game details...', subtext: 'Processing in optimized batches' },
          { progress: 85, message: 'Finalizing games...', subtext: 'Quality checks and formatting' },
          { progress: 95, message: 'Almost ready!', subtext: 'Preparing your game collection' }
        ]
      },
      traditional: {
        duration: 75000, // 75 seconds (60-90s range)
        steps: [
          { progress: 15, message: 'Initializing Claude 4 Sonnet...', subtext: 'Preparing premium AI generation' },
          { progress: 25, message: 'Deep analysis of requirements...', subtext: 'Advanced prompt processing' },
          { progress: 40, message: 'Crafting detailed game concepts...', subtext: 'High-quality ideation in progress' },
          { progress: 60, message: 'Generating comprehensive details...', subtext: 'Premium quality takes time' },
          { progress: 80, message: 'Refining game mechanics...', subtext: 'Ensuring maximum quality' },
          { progress: 95, message: 'Final quality assurance...', subtext: 'Delivering premium results' }
        ]
      },
      mock: {
        duration: 2000, // 2 seconds
        steps: [
          { progress: 30, message: 'Loading mock data...', subtext: 'No API calls needed' },
          { progress: 70, message: 'Preparing sample games...', subtext: 'Development mode active' },
          { progress: 95, message: 'Mock generation complete!', subtext: 'Ready for testing' }
        ]
      }
    };
    
    const config = progressSteps[mode] || progressSteps.hybrid;
    let currentStep = 0;
    
    const intervalTime = config.duration / config.steps.length;
    
    const updateProgress = () => {
      if (currentStep < config.steps.length) {
        const step = config.steps[currentStep];
        
        if (progressBar) {
          progressBar.style.width = `${step.progress}%`;
        }
        if (progressMessage) {
          progressMessage.textContent = step.message;
        }
        if (progressSubtext) {
          progressSubtext.textContent = step.subtext;
        }
        
        console.log(`📊 Progress: ${step.progress}% - ${step.message}`);
        currentStep++;
        
        setTimeout(updateProgress, intervalTime);
      }
    };
    
    // Start the first update after a short delay
    setTimeout(updateProgress, 500);
  }

  function handleGenerateSubmit(event) {
    console.log('🚀 handleGenerateSubmit called - JavaScript working!');
    console.log('Event type:', event.type);
    console.log('Event target:', event.target);
    
    // Get UI elements in function scope (accessible to .then() and .catch() handlers)
    const progressArea = document.getElementById("generationProgress");
    const progressMessage = document.getElementById("progressMessage");  
    const progressBar = document.getElementById("progressBar");
    const button = document.getElementById("generateButton");
    const customPromptField = document.getElementById('customPrompt');
    
    try {
      event.preventDefault();
      console.log('✅ preventDefault called');
      
      // Validate game count first
      const prompt = customPromptField ? customPromptField.value : '';
      const countValidation = validateGameCount(prompt);
      
      if (!countValidation.valid) {
        showPromptError(countValidation.error);
        return;
      }
      
      console.log(`🎯 Validated game count: ${countValidation.count}`);
      
      // Clear any existing errors
      clearPromptError();
      
      // Show progress immediately
      console.log('🔧 Looking for progress elements...');
      
      console.log('Progress elements found:', {
        progressArea: !!progressArea,
        progressMessage: !!progressMessage,
        progressBar: !!progressBar
      });
      
      if (progressArea) {
        progressArea.classList.remove("hidden");
        console.log('✅ Progress area shown');
      } else {
        console.error('❌ Progress area not found!');
      }
      
      if (progressMessage) {
        progressMessage.textContent = `Generating ${countValidation.count} games...`;
        console.log('✅ Progress message updated');
      }
      
      if (progressBar) {
        progressBar.style.width = "10%";
        console.log('✅ Progress bar width set to 10%');
      }
      
      // Get selected generation mode and start appropriate progress simulation
      const selectedMode = document.querySelector('input[name="generationMode"]:checked')?.value || 'hybrid';
      const progressSubtext = document.getElementById("progressSubtext");
      
      console.log('🎯 Selected generation mode:', selectedMode);
      
      // Start progress simulation based on mode
      startProgressSimulation(selectedMode, progressBar, progressMessage, progressSubtext, countValidation.count);
      
    } catch (error) {
      console.error('❌ Error in handleGenerateSubmit:', error);
    }

    // Set button state (button already declared in function scope)
    if (button) {
      button.disabled = true;
      button.textContent = "⏳ Generating...";
      button.classList.remove("bg-blue-600", "hover:bg-blue-700");
      button.classList.add("bg-gray-400", "cursor-not-allowed");
    }

    // Submit form via AJAX to get games JSON and store in localStorage  
    const form = document.getElementById("generateForm");
    const formData = new FormData(form);
    const urlEncoded = new URLSearchParams(formData);
    
    fetch('/generate', {
      method: 'POST',
      headers: {
        'X-Session-ID': sessionId,
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: urlEncoded
    })
    .then(response => {
      console.log('🔍 Fetch response received:', response.status, response.statusText);
      console.log('🔍 Response headers:', response.headers);
      console.log('🔍 Response content-type:', response.headers.get('content-type'));
      return response.json();
    })
    .then(data => {
      console.log('🔍 JSON parsing successful, data:', data);
      // Close progress stream
      if (progressSource) {
        progressSource.close();
      }
      
      // Reset button state
      button.disabled = false;
      button.textContent = "🎯 Generate Games";
      button.classList.remove("bg-gray-400", "cursor-not-allowed");
      button.classList.add("bg-blue-600", "hover:bg-blue-700");
      
      // Hide progress area
      progressArea.classList.add("hidden");
      
      if (data.success) {
        // Save generated games to localStorage
        saveCustomGames(data.games);
        
        // Brief delay to show completion
        setTimeout(() => {
          window.location.href = `/?success=${encodeURIComponent(data.message)}&prompt=${encodeURIComponent(data.prompt)}`;
        }, 500);
      } else {
        // Handle error
        setTimeout(() => {
          window.location.href = `/?error=${encodeURIComponent(data.message || 'Generation failed')}`;
        }, 500);
      }
    })
    .catch(error => {
      // Reset button state on error
      button.disabled = false;
      button.textContent = "🎯 Generate Games";
      button.classList.remove("bg-gray-400", "cursor-not-allowed");
      button.classList.add("bg-blue-600", "hover:bg-blue-700");
      
      console.error('Generation failed:', error);
      
      // Provide more descriptive error messages based on error type
      let errorMessage = 'Generation failed. Please try again.';
      
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        errorMessage = 'Connection failed - please check your internet connection and try again.';
      } else if (error.name === 'SyntaxError' && error.message.includes('JSON')) {
        errorMessage = 'Server response error - please refresh the page and try again.';
      } else if (error.message && error.message.includes('rate limit')) {
        errorMessage = 'Rate limit exceeded - please wait a moment and try again.';
      } else if (error.message && error.message.includes('timeout')) {
        errorMessage = 'Request timed out - please try again with fewer games or check your connection.';
      } else if (error.message && error.message.includes('API key')) {
        errorMessage = 'Configuration error - please contact support.';
      } else if (error.message) {
        errorMessage = `Generation failed: ${error.message}`;
      }
      
      window.location.href = `/?error=${encodeURIComponent(errorMessage)}`;
    });
  }

  function showProgressNotification(message, type = "info") {
    // Create notification element
    const notification = document.createElement("div");
    notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transition-opacity duration-300 ${
      type === "success"
        ? "bg-green-500 text-white"
        : type === "error"
        ? "bg-red-500 text-white"
        : "bg-blue-500 text-white"
    }`;
    notification.innerHTML = `
      <div class="flex items-center">
        ${
          type === "info"
            ? `
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        `
            : ""
        }
        <span>${message}</span>
      </div>
    `;

    document.body.appendChild(notification);

    // Auto-remove after 5 seconds (unless it's an error)
    if (type !== "error") {
      setTimeout(() => {
        notification.style.opacity = "0";
        setTimeout(() => notification.remove(), 300);
      }, 5000);
    }
  }
  
  // Handle recommendation form submission
  async function handleRecommendSubmit(event) {
    event.preventDefault();
    
    console.log('🚿 Starting recommendation submission...');
    console.log('Session ID:', sessionId);
    
    // Show loading state
    const submitButton = event.target.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = '🔄 Syncing games...';
    
    // Get the selected game ID to debug
    const gameSelect = document.getElementById('gameId');
    const selectedGameId = gameSelect ? gameSelect.value : 'none';
    console.log('Selected game ID:', selectedGameId);
    
    try {
      // Check if we have custom games to sync
      const customGames = loadCustomGames();
      if (customGames && customGames.length > 0) {
        // Sync custom games before submitting
        console.log('🔄 Syncing custom games to server...');
        submitButton.textContent = 'Syncing games...';
        
        const syncResult = await syncCustomGamesToServer(customGames);
        console.log('Sync result:', syncResult);
        
        if (!syncResult) {
          // Sync failed - show error
          alert('Failed to sync games to server. Please try again.');
          submitButton.disabled = false;
          submitButton.textContent = originalText;
          return false;
        }
        
        // Validate the selected game exists in our custom games
        const selectedGameExists = customGames.find(game => game.id === selectedGameId);
        if (!selectedGameExists) {
          alert('Selected game not found in custom games. Please select a valid game.');
          submitButton.disabled = false;
          submitButton.textContent = originalText;
          return false;
        }
        
        submitButton.textContent = 'Processing...';
        // Small delay to ensure sync completes on server
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      // Reset button
      submitButton.disabled = false;
      submitButton.textContent = originalText;
      
      console.log('✅ Submitting form now...');
      // Now submit the form
      event.target.submit();
    } catch (error) {
      console.error('❌ Failed to sync games:', error);
      
      // Reset button
      submitButton.disabled = false;
      submitButton.textContent = originalText;
      
      console.log('⚠️ Submitting anyway with default behavior...');
      // Submit anyway - might work with default games
      event.target.submit();
    }
    
    return false; // Prevent default form submission
  }


  // Update game dropdown with unified game list (custom games replace defaults completely)
  function updateGameDropdown() {
    const gameSelect = document.getElementById('gameId');
    if (!gameSelect) return;
    
    const customGames = loadCustomGames();
    
    // Clear existing options except the first one ("Select a game...")
    while (gameSelect.children.length > 1) {
      gameSelect.removeChild(gameSelect.lastChild);
    }
    
    if (customGames && customGames.length > 0) {
      // Use ONLY custom games - no separation, no default games
      customGames.forEach(game => {
        const option = document.createElement('option');
        option.value = game.id;
        option.textContent = game.title;
        gameSelect.appendChild(option);
      });
      
      // Update dataset count display to show custom games count
      const countDisplay = document.querySelector('span.font-bold.text-casino');
      if (countDisplay) {
        countDisplay.textContent = customGames.length;
      }
    } else {
      // No custom games - show default games
      const defaultGames = <%- JSON.stringify(games) %>;
      defaultGames.forEach((game) => {
        const option = document.createElement('option');
        option.value = game.id;
        option.textContent = game.title;
        gameSelect.appendChild(option);
      });
    }
  }

  // Save custom prompt to sessionStorage
  function saveCustomPrompt(prompt) {
    sessionStorage.setItem('slotForge_customPrompt', prompt);
  }
  
  // Load custom prompt from sessionStorage
  function loadCustomPrompt() {
    return sessionStorage.getItem('slotForge_customPrompt') || '';
  }

  // Load saved preferences on page load
  document.addEventListener("DOMContentLoaded", function () {
    console.log("🔧 DOM loaded, starting initialization...");
    
    // Load custom games and update dropdown (custom games take priority)
    updateGameDropdown();
    
    // Note: Redis storage is globally accessible, no sync needed
    
    // Load saved custom prompt
    const customPromptField = document.getElementById('customPrompt');
    if (customPromptField) {
      const savedPrompt = loadCustomPrompt();
      if (savedPrompt) {
        customPromptField.value = savedPrompt;
      }
      
      // Save prompt on every change
      customPromptField.addEventListener('input', function() {
        saveCustomPrompt(this.value);
        
        // Clear error when user starts typing
        const existingError = document.getElementById('prompt-error');
        if (existingError) {
          clearPromptError();
        }
      });
    }
    
    // CRITICAL: Attach button click handler via JavaScript
    console.log("🔧 Looking for generateButton...");
    const generateButton = document.getElementById('generateButton');
    if (generateButton) {
      console.log("✅ Found generateButton, attaching click handler");
      console.log("Button element:", generateButton);
      console.log("Button disabled?", generateButton.disabled);
      console.log("Button style display:", getComputedStyle(generateButton).display);
      
      // Test basic click detection first
      generateButton.addEventListener('click', function(event) {
        alert('BUTTON CLICKED - JavaScript working!');
        console.log('🔥 BUTTON CLICKED! Handler triggered');
        console.log('Event details:', event);
        handleGenerateSubmit(event);
      });
      console.log("✅ Click handler attached successfully");
      
      // Also try mousedown as backup
      generateButton.addEventListener('mousedown', function() {
        console.log('🖱️ MOUSEDOWN detected on button');
      });
      
      // Also try mouseup
      generateButton.addEventListener('mouseup', function() {
        console.log('🖱️ MOUSEUP detected on button');
        console.log('Manually triggering handleGenerateSubmit...');
        handleGenerateSubmit({ type: 'mouseup', target: generateButton, preventDefault: () => {} });
      });
      
    } else {
      console.error('❌ Generate button not found!');
      console.log('Available buttons:', document.querySelectorAll('button'));
    }
    
    // Load saved slider preferences and ensure they add up to 100%
    const savedPrefs = JSON.parse(
      localStorage.getItem("slotForge_weightPrefs") || "{}"
    );
    
    // Default values that sum to 100%
    const defaultWeights = {
      theme: 0.4,
      volatility: 0.3, 
      studio: 0.2,
      mechanics: 0.1
    };
    
    // Use saved preferences or defaults
    const weights = Object.keys(defaultWeights).reduce((acc, key) => {
      acc[key] = savedPrefs[key] !== undefined ? savedPrefs[key] : defaultWeights[key];
      return acc;
    }, {});
    
    // Normalize to ensure 100% total
    const currentTotal = Object.values(weights).reduce((sum, val) => sum + val, 0);
    if (currentTotal !== 1.0) {
      console.log(`⚠️ Normalizing weights from ${Math.round(currentTotal * 100)}% to 100%`);
      Object.keys(weights).forEach(key => {
        weights[key] = weights[key] / currentTotal;
      });
    }
    
    // Apply normalized weights to sliders
    Object.keys(weights).forEach((sliderId) => {
      const slider = document.getElementById(sliderId);
      if (slider) {
        slider.value = weights[sliderId];
        updateSliderValue(sliderId, weights[sliderId], true); // Skip rebalance during initialization
      }
    });

    // Initialize similarity engine toggle
    // Similarity engine now uses radio buttons - no initialization needed

    // Detect and send client context
    detectAndSendClientContext();
    
    console.log("🔧 Initialization complete. Checking all elements...");
    console.log("Elements check:", {
      generateButton: !!document.getElementById('generateButton'),
      generateForm: !!document.getElementById('generateForm'),
      progressArea: !!document.getElementById('generationProgress'),
      progressMessage: !!document.getElementById('progressMessage'),
      progressBar: !!document.getElementById('progressBar'),
      customPrompt: !!document.getElementById('customPrompt')
    });
  });

  // Reset to default games function
  async function resetToDefaults() {
    if (!confirm('This will clear all custom games and reset to default games. Continue?')) {
      return;
    }
    
    try {
      const response = await fetch('/api/reset-games', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        // Clear localStorage to ensure client syncs with server state
        clearCustomGames();
        location.reload();
      } else {
        alert('Failed to reset games. Please try again.');
      }
    } catch (error) {
      console.error('Error resetting games:', error);
      alert('Failed to reset games. Please try again.');
    }
  }

  // Add loading state to recommendation form
  document.addEventListener('DOMContentLoaded', function() {
    const recommendForm = document.querySelector('form[action="/recommend"]');
    const findBtn = document.getElementById('find-games-btn');
    const btnText = document.getElementById('btn-text');
    const btnSpinner = document.getElementById('btn-spinner');
    
    if (recommendForm && findBtn) {
      recommendForm.addEventListener('submit', function() {
        // Show loading state immediately
        findBtn.disabled = true;
        btnText.classList.add('hidden');
        btnSpinner.classList.remove('hidden');
        
        console.log('🚀 Starting recommendation submission...');
      });
    }
  });
</script>

<%- include('partials/footer') %>
